# main ()
snippet main
int main() {
	${0}
	return 0;
}
endsnippet

# main (int arc, char **argv)
snippet mainn
int main(int argc, char **argv) {
	${0}
	return 0;
}
endsnippet

#include <...>
snippet inc
#include <${1:stdio}.h>
endsnippet

#include "..."
snippet Inc
#include "${1:`vim_snippets#Filename("$1.h")`}"
endsnippet

# ifndef...define...endif
snippet ndef
#ifndef $1
#define ${1:symbol} ${2:value}
#endif
endsnippet

# define
snippet def
#define
endsnippet

# ifdef...endif
snippet ifdef
#ifdef ${1:symbol}
	${2:#define }
#endif
endsnippet

# if
snippet #if
#if ${1:symbol}
	${0:${VISUAL}}
#endif
endsnippet

# header include guard
snippet once
#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}

#define $1

${0}

#endif
endsnippet

# disable C++ name mangling in C headers
snippet nocxx
#ifdef __cplusplus
extern "C" {
#endif

${0}

#ifdef __cplusplus
}
#endif
endsnippet

# if
snippet if
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

# if else
snippet ife
if (${1:true}) {
	${2:${VISUAL}}
} 
else {
	${0}
}
endsnippet

# else
snippet el
else {
	${0:${VISUAL}}
}
endsnippet

# else if
snippet elif
else if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

# ifi
snippet ifi
if (${1:true}) ${0};
endsnippet

# ternary
snippet t
${1:} ? ${2:a} : ${3:b}
endsnippet

# switch
snippet switch
switch (${1:}) {
	case ${2:}:
		${3}
		${4:break;}${5}
	default:
		${6}
}
endsnippet

# switch without default
snippet switchndef
switch (${1:}) {
	case ${2:}:
		${3}
		${4:break;}${5}
}
endsnippet

# case
snippet case
case ${1:}:
	${2}
	${3:break;}
endsnippet

# return
snippet ret
return ${0};
endsnippet

# for
snippet for
for(int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4}
}
endsnippet

# for(custom)
snippet forr
for (int ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
	${5}
}
endsnippet

# while
snippet whi
while (${1:}) {
	${0:${VISUAL}}
}
endsnippet

# do... while
snippet do
do {
	${0:${VISUAL}}
}
while (${1:});
endsnippet

# function definition with zero parameters
snippet fun
${1:void} ${2:function_name}() {
	${3}
}
endsnippet

# function definition with one parameter
snippet fun1
${1:void} ${2:function_name}(${3}) {
	${4}
}
endsnippet

# function definition with two parameters
snippet fun2
${1:void} ${2:function_name}(${3:type} ${4:parameter}, ${5:type} ${6:parameter}) {
	${7}
}
endsnippet

# function definition with three parameters
snippet fun3
${1:void} ${2:function_name}(${3:type} ${4:parameter}, ${5:type} ${6:parameter}, ${7:type} ${8:parameter}) {
	${9}
}
endsnippet

# function declaration
snippet fund
${1:void} ${2:function_name}(${3});
endsnippet

# typedef
snippet td
typedef ${1:int} ${2:custom_type};
endsnippet

# struct
snippet st
struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
	${2:data}
} ${0:};
endsnippet

# typedef struct
snippet tds
typedef struct ${2:_$1} {
	m_${3:data}
} ${1:`vim_snippets#Filename('$1_t', 'name')`};
endsnippet

# enum
snippet enum
enum ${1:name} { ${0} };
endsnippet

# typedef enum
snippet tde
typedef enum {
	${1:data}
} ${2:foo};
endsnippet

# printf
snippet pr
printf("${1:%s}\n"${2});
endsnippet

# fprintf(again, this isn't as nice as TextMate's version, but it works)
snippet fpr
fprintf(${1:stderr}, "${2:%s}\n"${3});
endsnippet

snippet prd
printf("${1:} = %d\n", $1);
endsnippet

snippet prf
printf("${1:} = %f\n", $1);
endsnippet

snippet prx
printf("${1:} = %${2}\n", $1);
endsnippet

# TODO section
snippet todo
/**
 * TODO: ${1:Todo description here}
 **/
endsnippet
